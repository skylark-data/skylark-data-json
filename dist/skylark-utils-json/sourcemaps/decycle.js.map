{"version":3,"sources":["decycle.js"],"names":["define","json","stringify","decycle","object","replacer","objects","WeakMap","derez","value","path","old_path","nu","undefined","Boolean","Date","Number","RegExp","String","get","$ref","set","Array","isArray","forEach","element","i","Object","keys","name"],"mappings":";;;;;;;AAAAA,QACC,SACA,eACC,SAASC,EAAKC,GACb,aA6FA,OAAOD,EAAKE,QA5FX,SAAiBC,EAAQC,GA0BrB,IAAIC,EAAU,IAAIC,QAElB,OAAQ,SAASC,EAAMC,EAAOC,GAI1B,IAAIC,EACAC,EAWJ,YAPiBC,IAAbR,IACAI,EAAQJ,EAASI,IAOA,iBAAVA,GACM,OAAVA,GACEA,aAAiBK,SACjBL,aAAiBM,MACjBN,aAAiBO,QACjBP,aAAiBQ,QACjBR,aAAiBS,OAqCnBT,OA7BcI,KADjBF,EAAWL,EAAQa,IAAIV,KAEXW,KAAMT,IAKlBL,EAAQe,IAAIZ,EAAOC,GAIfY,MAAMC,QAAQd,IACdG,KACAH,EAAMe,QAAQ,SAAUC,EAASC,GAC7Bd,EAAGc,GAAKlB,EAAMiB,EAASf,EAAO,IAAMgB,EAAI,SAM5Cd,KACAe,OAAOC,KAAKnB,GAAOe,QAAQ,SAAUK,GACjCjB,EAAGiB,GAAQrB,EACPC,EAAMoB,GACNnB,EAAO,IAAMR,EAAU2B,GAAQ,QAIpCjB,GA1DR,CA6DLR,EAAQ","file":"../decycle.js","sourcesContent":["define([\r\n\t\"./json\",\r\n\t\"./stringify\"\r\n],function(json,stringify){\r\n   \"use strict\";\r\n    function decycle(object, replacer) {\r\n\r\n// Make a deep copy of an object or array, assuring that there is at most\r\n// one instance of each object or array in the resulting structure. The\r\n// duplicate references (which might be forming cycles) are replaced with\r\n// an object of the form\r\n\r\n//      {\"$ref\": PATH}\r\n\r\n// where the PATH is a JSONPath string that locates the first occurance.\r\n\r\n// So,\r\n\r\n//      var a = [];\r\n//      a[0] = a;\r\n//      return JSON.stringify(JSON.decycle(a));\r\n\r\n// produces the string '[{\"$ref\":\"$\"}]'.\r\n\r\n// If a replacer function is provided, then it will be called for each value.\r\n// A replacer function receives a value and returns a replacement value.\r\n\r\n// JSONPath is used to locate the unique object. $ indicates the top level of\r\n// the object or array. [NUMBER] or [STRING] indicates a child element or\r\n// property.\r\n\r\n        var objects = new WeakMap();     // object to path mappings\r\n\r\n        return (function derez(value, path) {\r\n\r\n// The derez function recurses through the object, producing the deep copy.\r\n\r\n            var old_path;   // The path of an earlier occurance of value\r\n            var nu;         // The new object or array\r\n\r\n// If a replacer function was provided, then call it to get a replacement value.\r\n\r\n            if (replacer !== undefined) {\r\n                value = replacer(value);\r\n            }\r\n\r\n// typeof null === \"object\", so go on if this value is really an object but not\r\n// one of the weird builtin objects.\r\n\r\n            if (\r\n                typeof value === \"object\"\r\n                && value !== null\r\n                && !(value instanceof Boolean)\r\n                && !(value instanceof Date)\r\n                && !(value instanceof Number)\r\n                && !(value instanceof RegExp)\r\n                && !(value instanceof String)\r\n            ) {\r\n\r\n// If the value is an object or array, look to see if we have already\r\n// encountered it. If so, return a {\"$ref\":PATH} object. This uses an\r\n// ES6 WeakMap.\r\n\r\n                old_path = objects.get(value);\r\n                if (old_path !== undefined) {\r\n                    return {$ref: old_path};\r\n                }\r\n\r\n// Otherwise, accumulate the unique value and its path.\r\n\r\n                objects.set(value, path);\r\n\r\n// If it is an array, replicate the array.\r\n\r\n                if (Array.isArray(value)) {\r\n                    nu = [];\r\n                    value.forEach(function (element, i) {\r\n                        nu[i] = derez(element, path + \"[\" + i + \"]\");\r\n                    });\r\n                } else {\r\n\r\n// If it is an object, replicate the object.\r\n\r\n                    nu = {};\r\n                    Object.keys(value).forEach(function (name) {\r\n                        nu[name] = derez(\r\n                            value[name],\r\n                            path + \"[\" + stringify(name) + \"]\"\r\n                        );\r\n                    });\r\n                }\r\n                return nu;\r\n            }\r\n            return value;\r\n        }(object, \"$\"));\r\n   };\r\n\r\n   return json.decycle = decycle;\r\n});\r\n"]}