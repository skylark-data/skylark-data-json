{"version":3,"sources":["stringify.js"],"names":["define","json","f","n","this_value","this","valueOf","Date","prototype","toJSON","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Boolean","Number","String","meta","\b","\t","\n","\f","\r","\"","\\","stringify","value","replacer","space","i","gap","indent","rep","length","Error","str","key","holder","k","v","partial","mind","call","quote","Object","toString","apply","join","push","hasOwnProperty",""],"mappings":";;;;;;;AAAAA,QACC,UACC,SAASC,GACP,aAEA,SAASC,EAAEC,GAEP,OAAQA,EAAI,GACN,IAAMA,EACNA,EAGV,SAASC,IACL,OAAOC,KAAKC,UAsOhB,MAnOqC,mBAA1BC,KAAKC,UAAUC,SAEtBF,KAAKC,UAAUC,OAAS,WAEpB,OAAOC,SAASL,KAAKC,WAEbD,KAAKM,iBACH,IACAT,EAAEG,KAAKO,cAAgB,GACvB,IACAV,EAAEG,KAAKQ,cACP,IACAX,EAAEG,KAAKS,eACP,IACAZ,EAAEG,KAAKU,iBACP,IACAb,EAAEG,KAAKW,iBACP,IAEJ,MAGVC,QAAQT,UAAUC,OAASL,EAC3Bc,OAAOV,UAAUC,OAASL,EAC1Be,OAAOX,UAAUC,OAASL,GAuJ9BgB,MACIC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,IAAM,MACNC,KAAM,QA6CH1B,EAAK2B,UA3CZ,SAAmBC,EAAOC,EAAUC,GAQhC,IAAIC,EAOJ,GANAC,IAAM,GACNC,OAAS,GAKY,iBAAVH,EACP,IAAKC,EAAI,EAAGA,EAAID,EAAOC,GAAK,EACxBE,QAAU,QAKU,iBAAVH,IACdG,OAASH,GAOb,GADAI,IAAML,EACFA,GAAgC,mBAAbA,IACC,iBAAbA,GACuB,iBAApBA,EAASM,QAEnB,MAAM,IAAIC,MAAM,kBAMpB,OAtMJ,SAASC,EAAIC,EAAKC,GAId,IAAIR,EACAS,EACAC,EACAN,EAEAO,EADAC,EAAOX,IAEPJ,EAAQW,EAAOD,GAqBnB,OAhBIV,GACoB,iBAAVA,GACiB,mBAAjBA,EAAMpB,SAEhBoB,EAAQA,EAAMpB,OAAO8B,IAMN,mBAARJ,MACPN,EAAQM,IAAIU,KAAKL,EAAQD,EAAKV,WAKnBA,GACf,IAAK,SACD,OAAOiB,MAAMjB,GAEjB,IAAK,SAID,OAAQnB,SAASmB,GACXV,OAAOU,GACP,OAEV,IAAK,UACL,IAAK,OAMD,OAAOV,OAAOU,GAKlB,IAAK,SAKD,IAAKA,EACD,MAAO,OAUX,GALAI,KAAOC,OACPS,KAI+C,mBAA3CI,OAAOvC,UAAUwC,SAASC,MAAMpB,GAA6B,CAM7D,IADAO,EAASP,EAAMO,OACVJ,EAAI,EAAGA,EAAII,EAAQJ,GAAK,EACzBW,EAAQX,GAAKM,EAAIN,EAAGH,IAAU,OAmBlC,OAbAa,EAAuB,IAAnBC,EAAQP,OACN,KACAH,IAEM,MACEA,IACAU,EAAQO,KAAK,MAAQjB,KACrB,KACAW,EACA,IAEJ,IAAMD,EAAQO,KAAK,KAAO,IACpCjB,IAAMW,EACCF,EAKX,GAAIP,KAAsB,iBAARA,IAEd,IADAC,EAASD,IAAIC,OACRJ,EAAI,EAAGA,EAAII,EAAQJ,GAAK,EACH,iBAAXG,IAAIH,KAEXU,EAAIJ,EADJG,EAAIN,IAAIH,GACGH,KAEPc,EAAQQ,KAAKL,MAAML,IACf,IACM,KACA,KACNC,QAQhB,IAAKD,KAAKZ,EACFkB,OAAOvC,UAAU4C,eAAeP,KAAKhB,EAAOY,KAC5CC,EAAIJ,EAAIG,EAAGZ,KAEPc,EAAQQ,KAAKL,MAAML,IACf,IACM,KACA,KACNC,GAepB,OANAA,EAAuB,IAAnBC,EAAQP,OACN,KACAH,IACI,MAAQA,IAAMU,EAAQO,KAAK,MAAQjB,KAAO,KAAOW,EAAO,IACxD,IAAMD,EAAQO,KAAK,KAAO,IACpCjB,IAAMW,EACCF,GAsDJJ,CAAI,IAAKe,GAAIxB","file":"../stringify.js","sourcesContent":["define([\r\n\t\"./json\"\r\n],function(json){\r\n    \"use strict\";\r\n\r\n    function f(n) {\r\n        // Format integers to have at least two digits.\r\n        return (n < 10)\r\n            ? \"0\" + n\r\n            : n;\r\n    }\r\n\r\n    function this_value() {\r\n        return this.valueOf();\r\n    }\r\n\r\n    if (typeof Date.prototype.toJSON !== \"function\") {\r\n\r\n        Date.prototype.toJSON = function () {\r\n\r\n            return isFinite(this.valueOf())\r\n                ? (\r\n                    this.getUTCFullYear()\r\n                    + \"-\"\r\n                    + f(this.getUTCMonth() + 1)\r\n                    + \"-\"\r\n                    + f(this.getUTCDate())\r\n                    + \"T\"\r\n                    + f(this.getUTCHours())\r\n                    + \":\"\r\n                    + f(this.getUTCMinutes())\r\n                    + \":\"\r\n                    + f(this.getUTCSeconds())\r\n                    + \"Z\"\r\n                )\r\n                : null;\r\n        };\r\n\r\n        Boolean.prototype.toJSON = this_value;\r\n        Number.prototype.toJSON = this_value;\r\n        String.prototype.toJSON = this_value;\r\n    }\r\n    function str(key, holder) {\r\n\r\n// Produce a string from holder[key].\r\n\r\n        var i;          // The loop counter.\r\n        var k;          // The member key.\r\n        var v;          // The member value.\r\n        var length;\r\n        var mind = gap;\r\n        var partial;\r\n        var value = holder[key];\r\n\r\n// If the value has a toJSON method, call it to obtain a replacement value.\r\n\r\n        if (\r\n            value\r\n            && typeof value === \"object\"\r\n            && typeof value.toJSON === \"function\"\r\n        ) {\r\n            value = value.toJSON(key);\r\n        }\r\n\r\n// If we were called with a replacer function, then call the replacer to\r\n// obtain a replacement value.\r\n\r\n        if (typeof rep === \"function\") {\r\n            value = rep.call(holder, key, value);\r\n        }\r\n\r\n// What happens next depends on the value's type.\r\n\r\n        switch (typeof value) {\r\n        case \"string\":\r\n            return quote(value);\r\n\r\n        case \"number\":\r\n\r\n// JSON numbers must be finite. Encode non-finite numbers as null.\r\n\r\n            return (isFinite(value))\r\n                ? String(value)\r\n                : \"null\";\r\n\r\n        case \"boolean\":\r\n        case \"null\":\r\n\r\n// If the value is a boolean or null, convert it to a string. Note:\r\n// typeof null does not produce \"null\". The case is included here in\r\n// the remote chance that this gets fixed someday.\r\n\r\n            return String(value);\r\n\r\n// If the type is \"object\", we might be dealing with an object or an array or\r\n// null.\r\n\r\n        case \"object\":\r\n\r\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\r\n// so watch out for that case.\r\n\r\n            if (!value) {\r\n                return \"null\";\r\n            }\r\n\r\n// Make an array to hold the partial results of stringifying this object value.\r\n\r\n            gap += indent;\r\n            partial = [];\r\n\r\n// Is the value an array?\r\n\r\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\r\n\r\n// The value is an array. Stringify every element. Use null as a placeholder\r\n// for non-JSON values.\r\n\r\n                length = value.length;\r\n                for (i = 0; i < length; i += 1) {\r\n                    partial[i] = str(i, value) || \"null\";\r\n                }\r\n\r\n// Join all of the elements together, separated with commas, and wrap them in\r\n// brackets.\r\n\r\n                v = partial.length === 0\r\n                    ? \"[]\"\r\n                    : gap\r\n                        ? (\r\n                            \"[\\n\"\r\n                            + gap\r\n                            + partial.join(\",\\n\" + gap)\r\n                            + \"\\n\"\r\n                            + mind\r\n                            + \"]\"\r\n                        )\r\n                        : \"[\" + partial.join(\",\") + \"]\";\r\n                gap = mind;\r\n                return v;\r\n            }\r\n\r\n// If the replacer is an array, use it to select the members to be stringified.\r\n\r\n            if (rep && typeof rep === \"object\") {\r\n                length = rep.length;\r\n                for (i = 0; i < length; i += 1) {\r\n                    if (typeof rep[i] === \"string\") {\r\n                        k = rep[i];\r\n                        v = str(k, value);\r\n                        if (v) {\r\n                            partial.push(quote(k) + (\r\n                                (gap)\r\n                                    ? \": \"\r\n                                    : \":\"\r\n                            ) + v);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n\r\n// Otherwise, iterate through all of the keys in the object.\r\n\r\n                for (k in value) {\r\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\r\n                        v = str(k, value);\r\n                        if (v) {\r\n                            partial.push(quote(k) + (\r\n                                (gap)\r\n                                    ? \": \"\r\n                                    : \":\"\r\n                            ) + v);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n// Join all of the member texts together, separated with commas,\r\n// and wrap them in braces.\r\n\r\n            v = partial.length === 0\r\n                ? \"{}\"\r\n                : gap\r\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\r\n                    : \"{\" + partial.join(\",\") + \"}\";\r\n            gap = mind;\r\n            return v;\r\n        }\r\n    }\r\n\r\n\r\n    meta = {    // table of character substitutions\r\n        \"\\b\": \"\\\\b\",\r\n        \"\\t\": \"\\\\t\",\r\n        \"\\n\": \"\\\\n\",\r\n        \"\\f\": \"\\\\f\",\r\n        \"\\r\": \"\\\\r\",\r\n        \"\\\"\": \"\\\\\\\"\",\r\n        \"\\\\\": \"\\\\\\\\\"\r\n    };\r\n    function stringify(value, replacer, space) {\r\n\r\n// The stringify method takes a value and an optional replacer, and an optional\r\n// space parameter, and returns a JSON text. The replacer can be a function\r\n// that can replace values, or an array of strings that will select the keys.\r\n// A default replacer method can be provided. Use of the space parameter can\r\n// produce text that is more easily readable.\r\n\r\n        var i;\r\n        gap = \"\";\r\n        indent = \"\";\r\n\r\n// If the space parameter is a number, make an indent string containing that\r\n// many spaces.\r\n\r\n        if (typeof space === \"number\") {\r\n            for (i = 0; i < space; i += 1) {\r\n                indent += \" \";\r\n            }\r\n\r\n// If the space parameter is a string, it will be used as the indent string.\r\n\r\n        } else if (typeof space === \"string\") {\r\n            indent = space;\r\n        }\r\n\r\n// If there is a replacer, it must be a function or an array.\r\n// Otherwise, throw an error.\r\n\r\n        rep = replacer;\r\n        if (replacer && typeof replacer !== \"function\" && (\r\n            typeof replacer !== \"object\"\r\n            || typeof replacer.length !== \"number\"\r\n        )) {\r\n            throw new Error(\"json.stringify\");\r\n        }\r\n\r\n// Make a fake root object containing our value under the key of \"\".\r\n// Return the result of stringifying the value.\r\n\r\n        return str(\"\", {\"\": value});\r\n    };\r\n\r\n    return json.stringify = stringify;\r\n\r\n});"]}