{"version":3,"sources":["retrocycle.js"],"names":["define","json","retrocycle","$","px","rez","value","Array","isArray","forEach","element","i","path","$ref","test","eval","Object","keys","name","item"],"mappings":";;;;;;;AAAAA,QACC,UACC,SAASC,MACR,aAEA,SAASC,WAAWC,GAqBf,IAAIC,GAAK,qFAoCT,OAlCC,SAASC,IAAIC,OAONA,OAA0B,iBAAVA,QACZC,MAAMC,QAAQF,OACdA,MAAMG,QAAQ,SAAUC,QAASC,GAC7B,GAAuB,iBAAZD,SAAoC,OAAZA,QAAkB,CACjD,IAAIE,KAAOF,QAAQG,KACC,iBAATD,MAAqBR,GAAGU,KAAKF,MACpCN,MAAMK,GAAKI,KAAKH,MAEhBP,IAAIK,YAKhBM,OAAOC,KAAKX,OAAOG,QAAQ,SAAUS,MACjC,IAAIC,KAAOb,MAAMY,MACjB,GAAoB,iBAATC,MAA8B,OAATA,KAAe,CAC3C,IAAIP,KAAOO,KAAKN,KACI,iBAATD,MAAqBR,GAAGU,KAAKF,MACpCN,MAAMY,MAAQH,KAAKH,MAEnBP,IAAIc,UA3B5B,CAiCEhB,GACKA,EAGZ,OAAOF,KAAKC,WAAaA","file":"../retrocycle.js","sourcesContent":["define([\r\n\t\"./json\"\r\n],function(json){\r\n   \"use strict\";\r\n   \r\n   function retrocycle($) {\r\n\r\n// Restore an object that was reduced by decycle. Members whose values are\r\n// objects of the form\r\n//      {$ref: PATH}\r\n// are replaced with references to the value found by the PATH. This will\r\n// restore cycles. The object will be mutated.\r\n\r\n// The eval function is used to locate the values described by a PATH. The\r\n// root object is kept in a $ variable. A regular expression is used to\r\n// assure that the PATH is extremely well formed. The regexp contains nested\r\n// * quantifiers. That has been known to have extremely bad performance\r\n// problems on some browsers for very long strings. A PATH is expected to be\r\n// reasonably short. A PATH is allowed to belong to a very restricted subset of\r\n// Goessner's JSONPath.\r\n\r\n// So,\r\n//      var s = '[{\"$ref\":\"$\"}]';\r\n//      return JSON.retrocycle(JSON.parse(s));\r\n// produces an array containing a single element which is the array itself.\r\n\r\n        var px = /^\\$(?:\\[(?:\\d+|\"(?:[^\\\\\"\\u0000-\\u001f]|\\\\(?:[\\\\\"\\/bfnrt]|u[0-9a-zA-Z]{4}))*\")\\])*$/;\r\n\r\n        (function rez(value) {\r\n\r\n// The rez function walks recursively through the object looking for $ref\r\n// properties. When it finds one that has a value that is a path, then it\r\n// replaces the $ref object with a reference to the value that is found by\r\n// the path.\r\n\r\n            if (value && typeof value === \"object\") {\r\n                if (Array.isArray(value)) {\r\n                    value.forEach(function (element, i) {\r\n                        if (typeof element === \"object\" && element !== null) {\r\n                            var path = element.$ref;\r\n                            if (typeof path === \"string\" && px.test(path)) {\r\n                                value[i] = eval(path);\r\n                            } else {\r\n                                rez(element);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    Object.keys(value).forEach(function (name) {\r\n                        var item = value[name];\r\n                        if (typeof item === \"object\" && item !== null) {\r\n                            var path = item.$ref;\r\n                            if (typeof path === \"string\" && px.test(path)) {\r\n                                value[name] = eval(path);\r\n                            } else {\r\n                                rez(item);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }($));\r\n        return $;\r\n   }\r\n\r\n   return json.retrocycle = retrocycle;\r\n\r\n});"]}